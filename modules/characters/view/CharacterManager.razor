@using Dorc.RoleplayingSystems.Base;

@inject IDialogService DialogService
@inject Dorc.RoleplayingSystems.Base.ICharacterRepository characterRepository;
@inject Dorc.RoleplayingSystems.Base.IRoleplayingSystemRepository systemRepository;

<MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" @onclick="OpenCreateCharacterDialog" Style="position: fixed; bottom: 2rem; right: 2rem;" />

<MudGrid>
	@foreach (var character in characters)
	{
		<MudItem xs="12">
			<MudCard>
				<MudCardContent>
					<MudText>@character.Name</MudText>
					<MudText Typo="Typo.body2">@character.Description</MudText>
				</MudCardContent>
				<MudCardActions>
					<MudItem xs="12">
						<MudItem Class="d-flex">
							<MudButton Link="@("character/" + character.Uuid)" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Visibility">Open</MudButton>
							<MudButton Class="ml-auto" @onclick="@(() => OpenDeleteCharacterDialog(character))" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
						</MudItem>
					</MudItem>
				</MudCardActions>
			</MudCard>
		</MudItem>
	}
</MudGrid>

@code {
	private List<Character> characters { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();
		UpdateCharacters();
	}

	private async void OpenCreateCharacterDialog()
	{
		var dialog = DialogService.Show<CreateCharacterDialog>("Create character");
		var result = await dialog.Result;

		if (!result.Cancelled)
		{
			UpdateCharacters();
			StateHasChanged();
		}
	}

	private async void OpenDeleteCharacterDialog(Character character)
	{
		var parameters = new DialogParameters();
		parameters.Add("Character", character);

		var dialog = DialogService.Show<DeleteCharacterDialog>("Delete character", parameters);
		var result = await dialog.Result;

		if (!result.Cancelled)
		{
			UpdateCharacters();
			StateHasChanged();
		}
	}

	private void UpdateCharacters()
	{
		characters = characterRepository.GetAll();
	}
}
