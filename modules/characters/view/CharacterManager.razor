@using Dorc.RoleplayingSystems.Base;
@using Dorc.Shared;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.Extensions.Logging;
@using System.IO
@using Newtonsoft.Json.Linq

@inject IDialogService DialogService
@inject ILogger<Index> Logger
@inject Dorc.RoleplayingSystems.Base.ICharacterFactory characterFactory
@inject Dorc.RoleplayingSystems.Base.ICharacterRepository characterRepository
@inject Dorc.RoleplayingSystems.Base.IRoleplayingSystemRepository systemRepository

<InputFile id="importCharacter" OnChange="ImportCharacter" multiple hidden accept=".char" />

<ContextualAppBar>
	<Actions>
		<MudButton HtmlTag="label" for="importCharacter" Variant="Variant.Outlined" Color="Color.Inherit">Import...</MudButton>
	</Actions>
</ContextualAppBar>

<MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" @onclick="OpenCreateCharacterDialog" Style="position: fixed; bottom: 2rem; right: 2rem;" />

<MudGrid>
	@foreach (var character in characters)
	{
		<MudItem xs="12">
			<MudCard>
				<MudCardHeader>
					<CardHeaderAvatar>
						<MudAvatar Image=@character.Portrait Style="height: 5rem; width: 5rem;" />
					</CardHeaderAvatar>
					<CardHeaderContent>
						<MudText Typo="Typo.h4">@character.Name</MudText>
					</CardHeaderContent>
				</MudCardHeader>
				@if (!String.IsNullOrEmpty(character.Description))
				{
					<MudCardContent>
						<MudText Typo="Typo.body1">@character.Description</MudText>
					</MudCardContent>
				}
				<MudCardActions>
					<MudItem xs="12">
						<MudItem Class="d-flex">
							<MudButton Link="@("character/" + character.Uuid)" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Visibility">Open</MudButton>
							<MudButton Class="ml-auto" @onclick="@(() => OpenDeleteCharacterDialog(character))" Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
						</MudItem>
					</MudItem>
				</MudCardActions>
			</MudCard>
		</MudItem>
	}
	</MudGrid>

@code {
	private List<Character> characters { get; set; }

	protected override void OnInitialized()
	{
		base.OnInitialized();
		UpdateCharacters();
	}

	private async void OpenCreateCharacterDialog()
	{
		var dialog = DialogService.Show<CreateCharacterDialog>("Create character");
		var result = await dialog.Result;

		if (!result.Cancelled)
			UpdateCharacters();
	}

	private async void OpenDeleteCharacterDialog(Character character)
	{
		var parameters = new DialogParameters();
		parameters.Add("Character", character);

		var dialog = DialogService.Show<DeleteCharacterDialog>("Delete character", parameters);
		var result = await dialog.Result;

		if (!result.Cancelled)
			UpdateCharacters();
	}

	private void UpdateCharacters()
	{
		characters = characterRepository.GetAll();
		StateHasChanged();
	}

	private async void ImportCharacter(InputFileChangeEventArgs e)
	{
		foreach (var file in e.GetMultipleFiles())
		{
			try
			{
				var characterJson = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
				var character = characterFactory.CreateCharacterFromJson(JObject.Parse(characterJson));
				if (characterRepository.Has(character.Uuid))
				{
					var parameters = new DialogParameters();
					parameters.Add("ImportingCharacter", character);
					parameters.Add("ExistingCharacter", characterRepository.Get(character.Uuid));
					var dialog = DialogService.Show<CharacterExistsDialog>("Character already exists", parameters);
					var result = await dialog.Result;
					continue;
				}
				characterRepository.Update(character);
			}
			catch (Exception exception)
			{
				Logger.LogError($"Could not import character: {exception.Message}");
			}
		}
		UpdateCharacters();
	}
}
