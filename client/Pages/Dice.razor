@page "/dice"

<MudText Typo="Typo.body1">
    
    <p>
        <MudGrid Spacing=2>
            <MudItem xs=4>
                <MudTextField @bind-Value="number" Label="Number of Dice" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs=4>
                <MudTextField @bind-Value="sides" Label="Sides per Die" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs=4>
                <MudTextField @bind-Value="offset" Label="Bonus to Result" Variant="Variant.Outlined" />
            </MudItem>
        </MudGrid>
        <p>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="RollDice">Let's Roll!</MudButton>
        </p>
        <p>
            Or are you playing Fate or something similar?
        </p>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="RollFudge">Let's Roll some Fudge Dice instead!</MudButton>
        <MudGrid Spacing=2>
            <MudItem xs=4>
                <MudField Label="End Result" Variant="Variant.Outlined">@result</MudField>
            </MudItem>
            <MudItem xs=8>
                <MudField Label="Dice Rolls" Variant="Variant.Outlined">@rolledRepresentation</MudField>
            </MudItem>
        </MudGrid>
    </p>
    
</MudText>


@code
{
    private int number = 1;
    private int sides = 6;
    private int offset = 0;
    private IEnumerable<int> rolled = null;
    private string rolledRepresentation = "";
    private int result = 0;

    private DiceRoller roller = new DiceRoller();

    private void RollDice()
    {
        rolled = roller.RollDice(number, sides);
        result = rolled.Sum() + offset;
        UpdateRepresentation();
    }

    private void RollFudge()
    {
        rolled = roller.RollFudge();
        result = rolled.Sum() + offset;
        UpdateRepresentation();
    }

    private void UpdateRepresentation()
    {
        rolledRepresentation = rolled
            .Skip(1)
            .Select(i => i.ToString())
            .Aggregate(
                rolled.First().ToString(),
                (concatenated, current) => 
                    concatenated = concatenated + ", " + current
            );
    }
}