@using Dorc.RoleplayingSystems.CoreWarrior;
@using Dorc.RoleplayingSystems.Base.Concepts;
@using Dorc.Shared;
@using Microsoft.Extensions.Logging;
@using Microsoft.JSInterop;

@inject Dorc.RoleplayingSystems.Base.ICharacterRepository characterRepository;
@inject IJSRuntime JS;
@inject ILogger<Index> Logger;
@inject NavigationManager NavigationManager;


@if (character is null) {
	<MudText>Loading...</MudText>
}
else
{
	<ContextualAppBar>
		<Title>
			<MudText Typo="Typo.h4">@character.Name</MudText>
		</Title>
		<Actions>
			@if (IsEditable)
			{
				<MudButton OnClick="Save" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Inherit">
					Save
				</MudButton>
			}
			else
			{
				<MudButton Link="@("character/" + character.Uuid + "/edit")" StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Inherit">
					Edit
				</MudButton>
			}
			<MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit">
				<MudMenuItem OnClick="ExportCharacter">Export...</MudMenuItem>
			</MudMenu>
		</Actions>
	</ContextualAppBar>
	
	<MudPaper Class="pa-8">

		<MudText Typo="Typo.h4">Warrior Data</MudText>

		<InputFile id="portraitUpload" OnChange="UploadPortrait" hidden accept="image/*"/>

		<MudItem Class="d-sm-flex">
            <MudItem Class="flex-grow-1">
            	<MudTextField Label="Name" @bind-Value="character.Name" For="@(() => character.Name)" ReadOnly="!IsEditable" />
            	<MudTextField Label="Description" @bind-Value="character.Description" For="@(() => character.Description)" ReadOnly="!IsEditable" />
            </MudItem>
            <MudItem Class="object-bottom">
            	<MudButton HtmlTag="label" for="portraitUpload" Disabled="!IsEditable">
            		<MudAvatar Image="@character.Portrait" Style="height: 10rem; width: 10rem;" />
            	</MudButton>
            </MudItem>
        </MudItem>
	

		<MudField Label="Aspects" Variant="Variant.Outlined">
        <MudTextField Label="High Concept" @bind-Value="character.Core.HighConcept" For="@(() => character.Core.HighConcept)" ReadOnly="!IsEditable" />
        <MudTextField Label="Dilemma" @bind-Value="character.Core.Dilemma" For="@(() => character.Core.Dilemma)" ReadOnly="!IsEditable" />
        @for (var i = 0; i < character.Core.Aspects.Count; i++)
        {
            var localVariable = i;
            <MudItem Class="d-flex">
            	<MudTextField @bind-Value="character.Core.Aspects[localVariable]" ReadOnly="!IsEditable" />
            	@if (IsEditable)
            	{
            		<MudIconButton OnClick="@(() => character.Core.Aspects.RemoveAt(localVariable))" Class="align-self-center"
            						 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
            	}
            </MudItem>
        }
        @if (IsEditable)
        {
            <MudButton OnClick="AddAspect">Add Aspect</MudButton>
        }
		</MudField>
	

	@if (IsEditable || character.Core.Skills.Count > 0)
	{
		<MudPaper Class="mt-4">
			<MudTable Breakpoint="Breakpoint.None" Items="character.Core.Skills" Hover="true" Striped="true" Dense="true">
				<ToolBarContent>
					<MudText Typo="Typo.h6">Skills</MudText>
					@if (IsEditable)
					{
						<MudSpacer/>
						<MudButton OnClick="AddSkill">Add Skill</MudButton>
					}
				</ToolBarContent>
				<ColGroup>
					<col style="width:90%;"/>
					<col style="width:10%;"/>
				</ColGroup>
				<HeaderContent>
					<MudTh>
						<MudTableSortLabel SortBy="new Func<Skill, object>(skill => skill.Name)">Skill</MudTableSortLabel>
					</MudTh>
					<MudTh Style="text-align:center">
						<MudTableSortLabel SortBy="new Func<Skill, object>(skill => skill.Value)">Value</MudTableSortLabel>
					</MudTh>
				</HeaderContent>
				<RowTemplate Context="skill">
					<MudTd DataLabel="Skill">
						@if (IsEditable)
						{
							<MudTextField @bind-Value="@skill.Name"/>
						}
						else
						{
							@skill.Name
						}
					</MudTd>
					<MudTd Style="text-align:center" DataLabel="Value">
						@if (IsEditable)
						{
							<MudTextField @bind-Value="@skill.Value"/>
						}
						else
						{
							@skill.Value
						}
					</MudTd>
					@if (IsEditable)
					{
						<MudTd>
							<MudIconButton OnClick="@(() => character.Core.Skills.Remove(skill))" Class="align-self-center"
							               Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete"/>
						</MudTd>
					}
				</RowTemplate>
			</MudTable>
		</MudPaper>
	}		
		
		@if (IsEditable || character.Core.Stunts.Count > 0)
        {
        	<MudPaper Class="mt-4">
        		<MudField Label="Stunts" Variant="Variant.Outlined">
        			@for (var i = 0; i < character.Core.Stunts.Count; i++)
        			{
        				var localVariable = i;
        				<MudItem Class="d-flex">
        					<MudTextField @bind-Value="character.Core.Stunts[localVariable].Description" ReadOnly="!IsEditable" />
        					@if (IsEditable)
        					{
        						<MudIconButton OnClick="@(() => character.Core.Stunts.RemoveAt(localVariable))" Class="align-self-center"
        									 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
        					}
        				</MudItem>
        			}
        			@if (IsEditable)
        			{
        				<MudButton OnClick="AddStunt">Add Stunt</MudButton>
        			}
        		</MudField>
        	</MudPaper>
        }
	
	@if (IsEditable || character.Core.Extras.Count > 0)
        {
        	<MudPaper Class="mt-4">
        		<MudField Label="Extras" Variant="Variant.Outlined">
        			@for (var i = 0; i < character.Core.Extras.Count; i++)
        			{
        				var localVariable = i;
        				<MudItem Class="d-flex">
        					<MudTextField @bind-Value="character.Core.Extras[localVariable].Description" ReadOnly="!IsEditable" />
        					@if (IsEditable)
        					{
        					<MudIconButton OnClick="@(() => character.Core.Extras.RemoveAt(localVariable))" Class="align-self-center"
        									 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
        					}
        				</MudItem>
        			}
        			@if (IsEditable)
        			{
        				<MudButton OnClick="AddExtra">Add Extra</MudButton>
        			}
        		</MudField>
        	</MudPaper>
        }
	</MudPaper>
	
	<MudPaper Class="pa-8 mt-4">

		<!--MudField Label="Mech" Variant="Variant.Filled" Style="@($"background-color: {Theme.Palette.Secondary}; color: {Theme.Palette.Secondary}")"-->

		<MudText Typo="Typo.h4">Mech Data</MudText>

		<InputFile id="mechImageUpload" OnChange="UploadMechImage" hidden accept="image/*"/>
		
		<MudItem Class="d-sm-flex">
            <MudItem Class="flex-grow-1">
                <MudTextField Label="Name" @bind-Value="character.Mech.Name" For="@(() => character.Mech.Name)" ReadOnly="!IsEditable" />
                <MudTextField Label="Description" @bind-Value="character.Mech.Description" For="@(() => character.Mech.Description)" ReadOnly="!IsEditable" />
				<MudGrid>
					<MudItem Class="flex-grow-1">
	                    <MudTextField Label="Tonnage" @bind-Value="character.Mech.Tonnage" For="@(() => character.Mech.Tonnage)" ReadOnly="!IsEditable"/>
	                </MudItem>

					<MudItem Class="flex-grow-1">
						<MudTextField Label="Class" @bind-Value="character.Mech.Class" ReadOnly="true"/>
					</MudItem>
					<MudItem Class="flex-grow-1">
                    	<MudTextField Label="Weapon Slots" @bind-Value="character.Mech.WeaponSlots" ReadOnly="true"/>
                    </MudItem>
				</MudGrid>
            </MudItem>
            <MudItem>
                <MudButton HtmlTag="label" for="mechImageUpload" Disabled="!IsEditable">
                    <MudAvatar Image="@character.Mech.Image" Style="height: 10rem; width: 10rem;" />
                </MudButton>
            </MudItem>
        </MudItem>

		<MudField Label="Aspects" Variant="Variant.Outlined">
            <MudTextField Label="High Concept" @bind-Value="character.Mech.HighConcept" For="@(() => character.Mech.HighConcept)" ReadOnly="!IsEditable" />
            <MudTextField Label="Dilemma" @bind-Value="character.Mech.Trouble" For="@(() => character.Mech.Trouble)" ReadOnly="!IsEditable" />
            @for (var i = 0; i < character.Mech.Aspects.Count; i++)
            {
                var mechAspectIndex = i;
                <MudItem Class="d-flex">
                    <MudTextField @bind-Value="character.Mech.Aspects[mechAspectIndex]" ReadOnly="!IsEditable" />
                    @if (IsEditable)
                    {
                        <MudIconButton OnClick="@(() => character.Mech.Aspects.RemoveAt(mechAspectIndex))" Class="align-self-center"
                        				 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
                    }
                </MudItem>
            }
            @if (IsEditable)
            {
                <MudButton OnClick="AddMechAspect">Add Aspect</MudButton>
            }
        </MudField>

		@if (IsEditable || character.Mech.Equipment.Count > 0)
        	{
        		<MudField Label="Equipment" Variant="Variant.Outlined">
        			@for (var i = 0; i < character.Mech.Equipment.Count; i++)
        			{
        				var localVariable = i;
        				<MudItem Class="d-flex">
        					<MudTextField @bind-Value="character.Mech.Equipment[localVariable].Description" ReadOnly="!IsEditable" />
        					@if (IsEditable)
        					{
        					<MudIconButton OnClick="@(() => character.Mech.Equipment.RemoveAt(localVariable))" Class="align-self-center"
        									 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
        					}
        				</MudItem>
        			}
        			@if (IsEditable)
        			{
        				<MudButton OnClick="AddMechEquipment">Add Equipment</MudButton>
        			}
        		</MudField>
        	}

		<MudField Label="Stress" Variant="Variant.Outlined">
			<MudGrid>
				<MudItem Class="my-auto" xs="3">
					<MudText Typo="Typo.h6">🛡️ Physical Stress</MudText>
				</MudItem>
				<MudItem xs="9">
					@foreach (var stressBox in @character.Mech.PhysicalStress.StressBoxes)
					{
						<MudCheckBox @bind-Checked="@stressBox.IsChecked" Label="@stressBox.Value.ToString()"/>
					}
				</MudItem>

				<MudItem xs="3">
					<MudText Typo="Typo.h6">🔥 Heat Dissipation</MudText>
				</MudItem>
				<MudItem xs="9">
					@character.Mech.HeatDissipation
				</MudItem>
			</MudGrid>
		</MudField>
	</MudPaper>
	
}

@code {
	[Parameter] public Character? character { get; set; }
	[Parameter] public bool IsEditable { get; set; }

	// TODO: Implement a way to access the global theme
	// https://stackoverflow.com/questions/69790366/how-to-access-to-the-current-theme-in-mudblazor-component
	MudTheme Theme = new MudTheme()
	{
		Palette = new Palette()
		{
			Primary = Colors.Cyan.Lighten5,
			Secondary = Colors.Amber.Lighten5,
			Tertiary = Colors.Red.Lighten5,
			AppbarBackground = Colors.LightBlue.Default,
			Background = Colors.Grey.Lighten4,
		}
	};

	void Save()
	{
		if (character is not null)
		{
			characterRepository.Update(character);
			NavigationManager.NavigateTo($"character/{character.Uuid}");
		}
	}

	void AddAspect()
	{
		character?.Core.Aspects.Add(string.Empty);
	}
	
	void AddMechAspect()
	{
		character?.Mech.Aspects.Add(string.Empty);
	}

	void AddExtra()
	{
		character?.Core.Extras.Add(new Dorc.RoleplayingSystems.Fate.Extra());
	}

	void AddSkill()
	{
		character?.Core.Skills.Add(new Dorc.RoleplayingSystems.Base.Concepts.Skill());
	}

	void AddStunt()
	{
		character?.Core.Stunts.Add(new Dorc.RoleplayingSystems.Fate.Stunt());
	}

	void AddMechEquipment()
	{
		character?.Mech.Equipment.Add(new Dorc.RoleplayingSystems.CoreWarrior.Equipment());
	}

	async Task UploadPortrait(InputFileChangeEventArgs args)
	{
		if (character != null)
		{
			var imageSource = args.File;
			var buffers = new byte[imageSource.Size];
			await imageSource.OpenReadStream().ReadAsync(buffers);
			string imageType = imageSource.ContentType;
			character.Portrait = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
		}
	}

	async Task UploadMechImage(InputFileChangeEventArgs args)
	{
		if (character != null)
		{
			var imageSource = args.File;
			var buffers = new byte[imageSource.Size];
			await imageSource.OpenReadStream().ReadAsync(buffers);
			string imageType = imageSource.ContentType;
			character.Mech.Image = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
		}
	}
	
	void ExportCharacter()
	{
		if (character is not null)
			Dorc.RoleplayingSystems.Base.CharacterSerialization.ExportCharacter(character, JS, Logger);
	}
}
