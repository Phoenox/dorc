@using Dorc.RoleplayingSystems.CoreWarrior;
@using Dorc.RoleplayingSystems.Base.Concepts;
@inject Dorc.RoleplayingSystems.Base.ICharacterRepository characterRepository;

@if (character is null)
{
	<MudText>Loading...</MudText>
}
else
{
	
	<EditForm Model="character" OnValidSubmit="Save">
		<MudToolBar>
			<MudSpacer/>
			<MudButton Link="characters">Cancel</MudButton>
			<MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
		</MudToolBar>

		<InputFile id="portraitUpload" OnChange="UploadPortrait" hidden accept="image/*" />

		<MudGrid>
			<MudItem xs=10>
				<MudTextField Label="Name" @bind-Value="character.Name" For="@(() => character.Name)" />
				<MudTextField Label="Description" @bind-Value="character.Description" For="@(() => character.Description)" />
			</MudItem>
			<MudItem xs=2 >
				<MudButton HtmlTag="label" for="portraitUpload">
					<MudAvatar Image="@character.Portrait" Style="height: 10rem; width: 10rem;" />
				</MudButton>
			</MudItem>
		</MudGrid>

		<MudField Label="Aspects" Variant="Variant.Outlined">
			<MudTextField Label="High Concept" @bind-Value="character.Stats.HighConcept" For="@(() => character.Stats.HighConcept)" />
			<MudTextField Label="Dilemma" @bind-Value="character.Stats.Dilemma" For="@(() => character.Stats.Dilemma)" />
			@for (var i = 0; i < stats.Aspects.Count; i++)
			{
				var localVariable = i;
				<MudItem Class="d-flex">
					<MudTextField @bind-Value="character.Stats.Aspects[localVariable]" />
					<MudIconButton OnClick="@(() => character.Stats.Aspects.RemoveAt(localVariable))" Class="align-self-center" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
				</MudItem>
			}
			<MudButton OnClick="AddAspect">Add Aspect</MudButton>
		</MudField>

		<MudTable Items="character.Stats.Skills" Hover="true" Striped="true">
			<ToolBarContent>
				<MudText Typo="Typo.h6">Skills</MudText>
				<MudSpacer/>
				<MudButton OnClick="AddSkill">Add Skill</MudButton>
			</ToolBarContent>
			<HeaderContent>
				<MudTh><MudTableSortLabel SortBy="new Func<Skill, object>(skill => skill.Name)">Skill</MudTableSortLabel></MudTh>
				<MudTh><MudTableSortLabel SortBy="new Func<Skill, object>(skill => skill.Value)">Value</MudTableSortLabel></MudTh>
			</HeaderContent>
			<RowTemplate Context="skill">
				<MudTd DataLabel="Skill">
					<MudTextField @bind-Value="@skill.Name"/>
				</MudTd>
				<MudTd DataLabel="Value">
					<MudTextField @bind-Value="@skill.Value"/>
				</MudTd>
				<MudTd>
					<MudIconButton OnClick="@(() => character.Stats.Skills.Remove(skill))" Class="align-self-center" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
				</MudTd>
			</RowTemplate>
		</MudTable>

		<MudField Label="Stunts" Variant="Variant.Outlined">
			@for (var i = 0; i < character.Stats.Stunts.Count; i++)
			{
				var localVariable = i;
				<MudItem Class="d-flex">
					<MudTextField @bind-Value="stats.Stunts[localVariable].Description" />
					<MudIconButton OnClick="@(() => character.Stats.Stunts.RemoveAt(localVariable))" Class="align-self-center" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
				</MudItem>
			}
			<MudButton OnClick="AddStunt">Add Stunt</MudButton>
		</MudField>

		<MudField Label="Extras" Variant="Variant.Outlined">
			@for (var i = 0; i < stats.Extras.Count; i++)
			{
				var localVariable = i;
				<MudItem Class="d-flex">
					<MudTextField @bind-Value="character.Stats.Extras[localVariable].Description" />
					<MudIconButton OnClick="@(() => character.Stats.Extras.RemoveAt(localVariable))" Class="align-self-center" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
				</MudItem>
			}
			<MudButton OnClick="AddExtra">Add Extra</MudButton>
		</MudField>

		<MudField Label="💪 Stress" Variant="Variant.Outlined">
			<MudGrid>
				@foreach (var stressBar in character.Stats.StressBars)
				{
					<MudItem Class="my-auto" xs="3">
						<MudText Typo="Typo.h6">@stressBar.Name</MudText>
					</MudItem>
					<MudItem xs="9">
						@foreach (var stressBox in @stressBar.StressBoxes)
						{
							<MudCheckBox @bind-Checked="@stressBox.IsChecked" Label="@stressBox.Value.ToString()" />
						}
					</MudItem>
				}
			</MudGrid>
		</MudField>

	</EditForm>
	
	<MudField Label="Mech" Variant="Variant.Outlined">
		
		<MudField Label="Aspects" Variant="Variant.Outlined">
			<!--MudTextField Label="Class" @bind-Value="character.Mech.Class" For="@(() => character.Mech.Class)"/-->
			<MudSelect T="MechClass" Label="Class" AnchorOrigin="Origin.BottomCenter" @bind-Value="character.Mech.Class">
                <MudSelectItem Value="@(MechClass.Light)" />
                <MudSelectItem Value="@(MechClass.Medium)" />
                <MudSelectItem Value="@(MechClass.Heavy)" />
                <MudSelectItem Value="@(MechClass.Assault)" />
                <MudSelectItem Value="@(MechClass.Other)" />
            </MudSelect>
			<MudTextField Label="Description" @bind-Value="character.Stats.Dilemma" For="@(() => character.Mech.Description)"/>
			@for (var i = 0; i < character.Mech.Aspects.Count; i++)
			{
				var mechAspectIndex = i;
				<MudItem Class="d-flex">
					<MudTextField @bind-Value="character.Mech.Aspects[mechAspectIndex]"/>
					<MudIconButton OnClick="@(() => character.Mech.Aspects.RemoveAt(mechAspectIndex))" Class="align-self-center" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete"/>
				</MudItem>
			}
			<MudButton OnClick="AddMechAspect">Add Aspect</MudButton>
		</MudField>

		
		<MudField Label="Stress" Variant="Variant.Outlined">
			<MudGrid>
				<MudItem Class="my-auto" xs="3">
					<MudText Typo="Typo.h6">🛡️ Physical Stress</MudText>
				</MudItem>
				<MudItem xs="9">
					@foreach (var stressBox in @character.Mech.PhysicalStress.StressBoxes)
					{
						<MudCheckBox @bind-Checked="@stressBox.IsChecked" Label="@stressBox.Value.ToString()"/>
					}
				</MudItem>
				
				<MudItem xs="3">
					<MudText Typo="Typo.h6">🔥 Heat Dissipation</MudText>
				</MudItem>
				<MudItem xs="9">
                    @character.Mech.HeatDissipation
                </MudItem>
			</MudGrid>
		</MudField>
	</MudField>
	
}

@code {
	[Parameter] public Character? character { get; set; }
	[Parameter] public bool IsEditable { get; set; }

	public Dorc.RoleplayingSystems.Fate.Core.Character stats => 
		character?.Stats 
		??
		new Dorc.RoleplayingSystems.Fate.Core.Character();
	
	// public Dorc.RoleplayingSystems.CoreWarrior.Mech mech => 
	// 	character?.Mech 
	// 	??
	// 	new Dorc.RoleplayingSystems.CoreWarrior.Mech();

	void Save()
	{
		if (character is not null)
			characterRepository.Update(character);
	}

	void AddAspect()
	{
		character?.Stats.Aspects.Add(string.Empty);
	}
	
	void AddMechAspect()
	{
		character?.Mech.Aspects.Add(string.Empty);
	}

	void AddExtra()
	{
		character?.Stats.Extras.Add(new Dorc.RoleplayingSystems.Fate.Extra());
	}

	void AddSkill()
	{
		character?.Stats.Skills.Add(new Dorc.RoleplayingSystems.Base.Concepts.Skill());
	}

	void AddStunt()
	{
		character?.Stats.Stunts.Add(new Dorc.RoleplayingSystems.Fate.Stunt());
	}

	void AddMechStunt()
	{
		character?.MechStunts.Add(new Dorc.RoleplayingSystems.Fate.Stunt());
	}

	async Task UploadPortrait(InputFileChangeEventArgs args)
	{
		if (character != null)
		{
			var imageSource = args.File;
			var buffers = new byte[imageSource.Size];
			await imageSource.OpenReadStream().ReadAsync(buffers);
			string imageType = imageSource.ContentType;
			character.Portrait = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
		}
	}
}
