@using Dorc.RoleplayingSystems.Fate.Core;
@using Dorc.RoleplayingSystems.Base.Concepts;
@using Dorc.Shared;
@using Microsoft.Extensions.Logging;
@using Microsoft.JSInterop;
@using System;

@inject Dorc.RoleplayingSystems.Base.ICharacterRepository characterRepository;
@inject IJSRuntime JS;
@inject ILogger<Index> Logger;
@inject NavigationManager NavigationManager;

@if (character is null)
{
	<MudText>Loading...</MudText>
}
else
{
	<ContextualAppBar>
		<Title>
			<MudText Typo="Typo.h4">@character.Name</MudText>
		</Title>
		<Actions>
			@if (IsEditable)
			{
				<MudButton OnClick="Save" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Inherit">
					Save
				</MudButton>
			}
			else
			{
				<MudButton Link="@("character/" + character.Uuid + "/edit")" StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Inherit">
					Edit
				</MudButton>
			}
			<MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit">
				<MudMenuItem OnClick="ExportCharacter">Export...</MudMenuItem>
			</MudMenu>
		</Actions>
	</ContextualAppBar>

	<InputFile id="portraitUpload" OnChange="UploadPortrait" hidden accept="image/*" />

	<MudPaper Class="pa-8">
		<MudItem Class="d-sm-flex">
			<MudItem Class="flex-grow-1">
				<MudTextField Label="Name" @bind-Value="character.Name" For="@(() => character.Name)" ReadOnly="!IsEditable" />
				<MudTextField Label="Description" @bind-Value="character.Description" For="@(() => character.Description)" ReadOnly="!IsEditable" />
			</MudItem>
			<MudItem>
				<MudButton HtmlTag="label" for="portraitUpload" Disabled="!IsEditable">
					<MudAvatar Image="@character.Portrait" Style="height: 10rem; width: 10rem;" />
				</MudButton>
			</MudItem>
		</MudItem>

		<MudField Label="Aspects" Variant="Variant.Outlined">
			<MudTextField Label="High Concept" @bind-Value="character.HighConcept" For="@(() => character.HighConcept)" ReadOnly="!IsEditable" />
			<MudTextField Label="Dilemma" @bind-Value="character.Dilemma" For="@(() => character.Dilemma)" ReadOnly="!IsEditable" />
			@for (var i = 0; i < character.Aspects.Count; i++)
			{
				var localVariable = i;
				<MudItem Class="d-flex">
					<MudTextField @bind-Value="character.Aspects[localVariable]" ReadOnly="!IsEditable" />
					@if (IsEditable)
					{
						<MudIconButton OnClick="@(() => character.Aspects.RemoveAt(localVariable))" Class="align-self-center"
										 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
					}
				</MudItem>
			}
			@if (IsEditable)
			{
				<MudButton OnClick="AddAspect">Add Aspect</MudButton>
			}
		</MudField>
	</MudPaper>

	@if (IsEditable || character.Skills.Count > 0)
	{
		<MudPaper Class="mt-4">
			<MudTable Breakpoint="Breakpoint.None" Items="character.Skills" Hover="true" Striped="true" Dense="true">
				<ToolBarContent>
					<MudText Typo="Typo.h6">Skills</MudText>
					@if (IsEditable)
			{
				<MudSpacer />
				<MudButton OnClick="AddSkill">Add Skill</MudButton>
			}
		</ToolBarContent>
		<ColGroup>
			<col style="width:90%;" />
			<col style="width:10%;" />
		</ColGroup>
		<HeaderContent>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<Skill, object>(skill => skill.Name)">Skill</MudTableSortLabel>
			</MudTh>
			<MudTh Style="text-align:center">
				<MudTableSortLabel SortBy="new Func<Skill, object>(skill => skill.Value)">Value</MudTableSortLabel>
			</MudTh>
		</HeaderContent>
		<RowTemplate Context="skill">
			<MudTd DataLabel="Skill">
				@if (IsEditable)
						{
					<MudTextField @bind-Value="@skill.Name" />
						}
						else
						{
					@skill.Name
						}
			</MudTd>
			<MudTd Style="text-align:center" DataLabel="Value">
				@if (IsEditable)
						{
					<MudTextField @bind-Value="@skill.Value" />
						}
						else
						{
					@skill.Value
						}
			</MudTd>
			@if (IsEditable)
					{
				<MudTd>
					<MudIconButton OnClick="@(() => character.Skills.Remove(skill))" Class="align-self-center"
											 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
				</MudTd>
					}
		</RowTemplate>
	</MudTable>
</MudPaper>
	}

	@if (IsEditable || character.Stunts.Count > 0)
	{
		<MudPaper Class="pa-8 mt-4">
			<MudField Label="Stunts" Variant="Variant.Outlined">
				@for (var i = 0; i < character.Stunts.Count; i++)
				{
					var localVariable = i;
					<MudItem Class="d-flex">
						<MudTextField @bind-Value="character.Stunts[localVariable].Description" ReadOnly="!IsEditable" />
						@if (IsEditable)
						{
							<MudIconButton OnClick="@(() => character.Stunts.RemoveAt(localVariable))" Class="align-self-center"
										 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
						}
					</MudItem>
				}
				@if (IsEditable)
				{
					<MudButton OnClick="AddStunt">Add Stunt</MudButton>
				}
			</MudField>
		</MudPaper>
	}

	@if (IsEditable || character.Extras.Count > 0)
	{
		<MudPaper Class="pa-8 mt-4">
			<MudField Label="Extras" Variant="Variant.Outlined">
				@for (var i = 0; i < character.Extras.Count; i++)
				{
					var localVariable = i;
					<MudItem Class="d-flex">
						<MudTextField @bind-Value="character.Extras[localVariable].Description" ReadOnly="!IsEditable" />
						if (IsEditable)
						{
						<MudIconButton OnClick="@(() => character.Extras.RemoveAt(localVariable))" Class="align-self-center"
										 Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" aria-label="delete" />
						}
					</MudItem>
				}
				@if (IsEditable)
				{
					<MudButton OnClick="AddExtra">Add Extra</MudButton>
				}
			</MudField>
		</MudPaper>
	}

	<MudPaper Class="pa-8 mt-4">
		<MudField Label="Stress" Variant="Variant.Outlined">
			<MudGrid>
				@foreach (var stressBar in character.StressBars)
				{
					<MudItem Class="my-auto" xs="3">
						<MudText>@stressBar.Name</MudText>
					</MudItem>
					<MudItem xs="9" Class="d-flex">
						@foreach (var stressBox in @stressBar.StressBoxes)
						{
							<MudCheckBox @bind-Checked="@stressBox.IsChecked" Label="@stressBox.Value.ToString()" />
						}
						@if (IsEditable)
						{
							<MudButton Class="ml-auto" OnClick="(() => stressBar.AddBox())">Add box</MudButton>
							<MudButton OnClick="(() => stressBar.RemoveBox())">Remove box</MudButton>
						}
					</MudItem>
				}
			</MudGrid>
		</MudField>
	</MudPaper>
}

@code {
	[Parameter] public Character? character { get; set; }
	[Parameter] public bool IsEditable { get; set; }

	void Save()
	{
		if (character is not null)
		{
			characterRepository.Update(character);
			NavigationManager.NavigateTo($"character/{character.Uuid}");
		}
	}

	void AddAspect()
	{
		character?.Aspects.Add(string.Empty);
	}

	void AddExtra()
	{
		character?.Extras.Add(new Dorc.RoleplayingSystems.Fate.Extra());
	}

	void AddSkill()
	{
		character?.Skills.Add(new Dorc.RoleplayingSystems.Base.Concepts.Skill());
	}

	void AddStunt()
	{
		character?.Stunts.Add(new Dorc.RoleplayingSystems.Fate.Stunt());
	}

	async Task UploadPortrait(InputFileChangeEventArgs args)
	{
		if (character != null)
		{
			var imageSource = args.File;
			var buffers = new byte[imageSource.Size];
			await imageSource.OpenReadStream().ReadAsync(buffers);
			string imageType = imageSource.ContentType;
			character.Portrait = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
		}
	}

	void ExportCharacter()
	{
		if (character is not null)
			Dorc.RoleplayingSystems.Base.CharacterSerialization.ExportCharacter(character, JS, Logger);
	}
}
